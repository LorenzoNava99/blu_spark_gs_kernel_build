name: Build blu_spark Kernel (gs-next with KSU-Next+SUSFS)

on:
  push:
    branches: [ main, blu_spark-16 ]
  pull_request:
    branches: [ main, blu_spark-16 ]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Clean build (mrproper)'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          bc \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          libc6-dev \
          binutils \
          gcc-aarch64-linux-gnu \
          python3 \
          python3-pip \
          git \
          wget \
          curl \
          lz4 \
          ccache \
          cpio \
          kmod

    - name: Install LLVM/Clang 18
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo apt-get install -y clang-18 lld-18 llvm-18

        # Set up LLVM symlinks
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-18 100
        sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-18 100
        sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-18 100
        sudo update-alternatives --install /usr/bin/llvm-objcopy llvm-objcopy /usr/bin/llvm-objcopy-18 100
        sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-18 100
        sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-18 100

    - name: Install Android tools
      run: |
        # Try multiple sources for mkbootimg
        pip3 install git+https://android.googlesource.com/platform/system/tools/mkbootimg || \
        (wget -q https://github.com/osm0sis/mkbootimg/raw/master/mkbootimg.py -O /usr/local/bin/mkbootimg && \
         chmod +x /usr/local/bin/mkbootimg) || \
        echo "Warning: mkbootimg not available, will create raw kernel image only"

    - name: Verify build environment
      run: |
        echo "=== Build Environment ==="
        gcc --version
        aarch64-linux-gnu-gcc --version
        clang --version
        ld.lld --version
        llvm-ar --version
        llvm-nm --version
        python3 --version
        make --version
        echo "========================="

    - name: Configure ccache
      run: |
        ccache --max-size=2G
        ccache --set-config=compression=true
        ccache --zero-stats
        echo "/usr/lib/ccache" >> $GITHUB_PATH

    - name: Clean build environment
      run: |
        if [ "${{ inputs.clean_build }}" = "true" ] || [ "${{ github.event_name }}" = "push" ]; then
          echo "=== Performing clean build ==="
          make ARCH=arm64 mrproper
        fi

    - name: Configure kernel
      run: |
        echo "=== Configuring kernel ==="
        make ARCH=arm64 LLVM=1 blu_spark_defconfig

        echo "=== Verifying SUSFS configuration ==="
        grep -E "CONFIG_KSU|SUSFS" .config || echo "Warning: No KSU/SUSFS config found"

    - name: Build kernel
      run: |
        echo "=== Building kernel ==="
        make ARCH=arm64 LLVM=1 \
          CROSS_COMPILE=aarch64-linux-gnu- \
          -j$(nproc) \
          Image.lz4

        echo "=== Building additional targets ==="
        make ARCH=arm64 LLVM=1 \
          CROSS_COMPILE=aarch64-linux-gnu- \
          -j$(nproc) \
          Image Image.gz modules

    - name: Verify SUSFS integration
      run: |
        echo "=== Verifying SUSFS Integration ==="
        KERNEL_PATH="arch/arm64/boot/Image.lz4"

        if [ -f "$KERNEL_PATH" ]; then
          echo "✅ Kernel image built successfully: $(ls -lah $KERNEL_PATH)"

          # Check for SUSFS strings
          if strings "$KERNEL_PATH" | grep -q "susfs:"; then
            echo "✅ SUSFS strings found in kernel image:"
            strings "$KERNEL_PATH" | grep "susfs:" | head -5
          else
            echo "❌ SUSFS strings not found in kernel image"
            echo "Available SUSFS-related strings:"
            strings "$KERNEL_PATH" | grep -i susfs | head -10 || echo "No SUSFS strings found"
            exit 1
          fi

          # Check for KSU strings
          if strings "$KERNEL_PATH" | grep -q "CONFIG_KSU\|ksu"; then
            echo "✅ KSU strings found in kernel image"
            strings "$KERNEL_PATH" | grep -E "CONFIG_KSU|@ksu" | head -3
          else
            echo "❌ KSU strings not found in kernel image"
            exit 1
          fi
        else
          echo "❌ Kernel image not found at $KERNEL_PATH"
          exit 1
        fi

    - name: Create boot image
      run: |
        echo "=== Creating Android Boot Image ==="
        mkdir -p output

        # Copy all kernel images
        cp arch/arm64/boot/Image* output/ 2>/dev/null || true

        # Create Android boot image (try different approaches)
        OUTPUT_NAME="blu_spark_gs-next_ksu_susfs"

        if command -v mkbootimg >/dev/null 2>&1; then
          echo "Using standalone mkbootimg"
          mkbootimg \
            --kernel arch/arm64/boot/Image.lz4 \
            --header_version 4 \
            --os_version 15.0.0 \
            --os_patch_level 2025-09 \
            --output output/${OUTPUT_NAME}.img
        elif python3 -c "import mkbootimg" 2>/dev/null; then
          echo "Using Python mkbootimg module"
          python3 -m mkbootimg \
            --kernel arch/arm64/boot/Image.lz4 \
            --header_version 4 \
            --os_version 15.0.0 \
            --os_patch_level 2025-09 \
            --output output/${OUTPUT_NAME}.img
        else
          echo "⚠️ mkbootimg not available, creating raw kernel image"
          cp arch/arm64/boot/Image.lz4 output/${OUTPUT_NAME}_kernel_only.lz4
          echo "Raw kernel image created: ${OUTPUT_NAME}_kernel_only.lz4"
          echo "Note: This is not a bootable Android image, kernel only!"
        fi

        # Create build info
        cat > output/build-info.txt << EOF
        Kernel: blu_spark gs-next
        Features: KSU-Next v12081 + SUSFS
        Architecture: arm64
        Config: blu_spark_defconfig
        Android: 15/16 ASB 2025-09
        Build Date: $(date -u)
        Git Commit: ${GITHUB_SHA}
        Kernel Size: $(stat -c%s arch/arm64/boot/Image.lz4) bytes
        Boot Image Size: $(stat -c%s output/${OUTPUT_NAME}.img) bytes
        EOF

        echo "=== Build Results ==="
        ls -lah output/
        echo ""
        echo "=== Boot Image Info ==="
        file output/${OUTPUT_NAME}.img

    - name: Final verification
      run: |
        echo "=== Final Verification ==="
        BOOT_IMG="output/blu_spark_gs-next_ksu_susfs.img"

        if [ -f "$BOOT_IMG" ]; then
          SIZE=$(stat -c%s "$BOOT_IMG")
          echo "✅ Boot image created: $SIZE bytes ($(($SIZE / 1024 / 1024))MB)"

          # Verify it's an Android boot image
          if file "$BOOT_IMG" | grep -q "Android"; then
            echo "✅ Valid Android boot image format"
          else
            echo "⚠️  Boot image format verification inconclusive"
          fi

          # Check if size is reasonable (should be 40-80MB for this kernel)
          if [ "$SIZE" -gt 20000000 ] && [ "$SIZE" -lt 100000000 ]; then
            echo "✅ Boot image size is reasonable"
          else
            echo "⚠️  Boot image size seems unusual: ${SIZE} bytes"
          fi
        else
          echo "❌ Boot image not found"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: blu_spark-gs-next-ksu-susfs-${{ github.run_number }}
        path: |
          output/blu_spark_gs-next_ksu_susfs.img
          output/Image*
          output/build-info.txt
          arch/arm64/boot/Image*
          .config
        retention-days: 30

    - name: Show ccache stats
      run: |
        echo "=== ccache Statistics ==="
        ccache --show-stats